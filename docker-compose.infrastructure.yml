# Infrastructure components for Cryptocurrency Arbitrage Detection System
# This extends the main docker-compose.yml with production-ready infrastructure

version: '3.8'

services:
  # Apache Kafka for event streaming
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - zookeeper-data:/var/lib/zookeeper/data
      - zookeeper-logs:/var/lib/zookeeper/log
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "2181"]
      interval: 30s
      timeout: 10s
      retries: 3

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    hostname: kafka
    container_name: kafka
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
      - "9101:9101"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:29092,PLAINTEXT_HOST://0.0.0.0:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
      # Performance optimizations
      KAFKA_NUM_NETWORK_THREADS: 8
      KAFKA_NUM_IO_THREADS: 8
      KAFKA_SOCKET_SEND_BUFFER_BYTES: 102400
      KAFKA_SOCKET_RECEIVE_BUFFER_BYTES: 102400
      KAFKA_SOCKET_REQUEST_MAX_BYTES: 104857600
      KAFKA_LOG_RETENTION_HOURS: 24
      KAFKA_LOG_RETENTION_BYTES: 1073741824
      KAFKA_LOG_SEGMENT_BYTES: 1073741824
      KAFKA_LOG_CLEANUP_POLICY: delete
      KAFKA_COMPRESSION_TYPE: gzip
    volumes:
      - kafka-data:/var/lib/kafka/data
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Kafka topic initialization
  kafka-setup:
    image: confluentinc/cp-kafka:7.4.0
    depends_on:
      kafka:
        condition: service_healthy
    volumes:
      - ./infrastructure/kafka:/scripts
    command: ["/scripts/topics.sh"]
    restart: "no"

  # TimescaleDB for time-series data
  timescaledb:
    image: timescale/timescaledb:latest-pg15
    container_name: timescaledb
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: arbitrage_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: arbitrage_db_password_2025
      TIMESCALEDB_TELEMETRY: off
    volumes:
      - timescaledb-data:/var/lib/postgresql/data
      - ./infrastructure/timescaledb/init.sql:/docker-entrypoint-initdb.d/init.sql
    command: >
      postgres
      -c shared_preload_libraries=timescaledb
      -c max_connections=200
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100
      -c random_page_cost=1.1
      -c effective_io_concurrency=200
      -c work_mem=4MB
      -c min_wal_size=1GB
      -c max_wal_size=4GB
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d arbitrage_db"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cluster for caching
  redis-master:
    image: redis:7-alpine
    container_name: redis-master
    ports:
      - "6379:6379"
    command: >
      redis-server
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
      --tcp-keepalive 300
      --tcp-backlog 511
    volumes:
      - redis-master-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  redis-replica:
    image: redis:7-alpine
    container_name: redis-replica
    ports:
      - "6380:6379"
    command: >
      redis-server
      --replicaof redis-master 6379
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
      --replica-read-only yes
    depends_on:
      redis-master:
        condition: service_healthy
    volumes:
      - redis-replica-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Market Data Service
  market-data-service:
    build: ./services/market-data-service
    container_name: market-data-service
    ports:
      - "8001:8001"
    depends_on:
      kafka:
        condition: service_healthy
      redis-master:
        condition: service_healthy
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - REDIS_URL=redis://redis-master:6379
    volumes:
      - ./services/market-data-service:/app
    restart: unless-stopped

  # Arbitrage Detection Service
  arbitrage-detection-service:
    build: ./services/arbitrage-detection-service
    container_name: arbitrage-detection-service
    ports:
      - "8002:8002"
    depends_on:
      kafka:
        condition: service_healthy
      redis-master:
        condition: service_healthy
      market-data-service:
        condition: service_started
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - REDIS_URL=redis://redis-master:6379
    volumes:
      - ./services/arbitrage-detection-service:/app
    restart: unless-stopped

  # Frontend (Enhanced with arbitrage dashboard)
  frontend:
    build: ./frontend
    ports:
      - "5173:5173"
    volumes:
      - ./frontend:/frontend
      - /frontend/node_modules
      - /frontend/dist
    depends_on:
      - market-data-service
      - arbitrage-detection-service
    develop:
      watch:
        - action: sync
          path: ./frontend/src
          target: /frontend/src
        - action: sync
          path: ./frontend/public
          target: /frontend/public
        - action: rebuild
          path: ./frontend/package.json

volumes:
  zookeeper-data:
  zookeeper-logs:
  kafka-data:
  timescaledb-data:
  redis-master-data:
  redis-replica-data:

networks:
  default:
    name: arbitrage-network
    driver: bridge
