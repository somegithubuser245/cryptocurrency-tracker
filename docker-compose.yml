# Cryptocurrency Arbitrage Detection System - Complete Environment
# Single Docker Compose file for all services and infrastructure

services:
  # =============================================================================
  # INFRASTRUCTURE SERVICES
  # =============================================================================
  
  # Kafka cleanup service - handles cluster ID mismatches gracefully
  kafka-cleanup:
    image: confluentinc/cp-kafka:7.4.0
    container_name: arbitrage-kafka-cleanup
    volumes:
      - kafka-data:/var/lib/kafka/data
      - zookeeper-data:/var/lib/zookeeper/data
    command: |
      bash -c "
        echo 'Checking for Kafka cluster ID mismatches...'
        
        # Check if meta.properties exists and has conflicting cluster ID
        META_FILE='/var/lib/kafka/data/meta.properties'
        if [ -f \"\$$META_FILE\" ]; then
          echo 'Found existing meta.properties file:'
          cat \"\$$META_FILE\"
          echo 'Removing potentially conflicting Kafka metadata...'
          rm -rf /var/lib/kafka/data/*
          echo 'Kafka data directory cleaned'
        else
          echo 'No existing meta.properties found - fresh start'
        fi
        
        echo 'Kafka cleanup completed successfully'
      "
    restart: "no"
    
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: arbitrage-zookeeper
    depends_on:
      kafka-cleanup:
        condition: service_completed_successfully
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - zookeeper-data:/var/lib/zookeeper/data
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "2181"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: arbitrage-kafka
    depends_on:
      zookeeper:
        condition: service_healthy
      kafka-cleanup:
        condition: service_completed_successfully
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:29092,PLAINTEXT_HOST://0.0.0.0:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      # Performance optimizations
      KAFKA_NUM_NETWORK_THREADS: 8
      KAFKA_NUM_IO_THREADS: 8
      KAFKA_LOG_RETENTION_HOURS: 24
      KAFKA_COMPRESSION_TYPE: gzip
    volumes:
      - kafka-data:/var/lib/kafka/data
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    container_name: arbitrage-redis
    ports:
      - "6379:6379"
    command: >
      redis-server
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
    volumes:
      - redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
    restart: unless-stopped

  timescaledb:
    image: timescale/timescaledb:latest-pg15
    container_name: arbitrage-timescaledb
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: arbitrage_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: arbitrage_password_2025
      TIMESCALEDB_TELEMETRY: off
    volumes:
      - timescaledb-data:/var/lib/postgresql/data
      - ./infrastructure/timescaledb/init.sql:/docker-entrypoint-initdb.d/init.sql
    command: >
      postgres
      -c shared_preload_libraries=timescaledb
      -c max_connections=200
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c work_mem=4MB
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d arbitrage_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # =============================================================================
  # KAFKA TOPIC INITIALIZATION
  # =============================================================================

  kafka-init:
    image: confluentinc/cp-kafka:7.4.0
    container_name: arbitrage-kafka-init
    depends_on:
      kafka:
        condition: service_healthy
    command: |
      bash -c "
        echo 'Creating Kafka topics...'
        
        # Price updates topic - high throughput, short retention
        kafka-topics --create --topic price-updates \
          --bootstrap-server kafka:29092 \
          --partitions 12 \
          --replication-factor 1 \
          --config retention.ms=86400000 \
          --config compression.type=gzip \
          --config max.message.bytes=1048576 \
          --if-not-exists
        
        # Arbitrage opportunities topic - medium throughput, longer retention
        kafka-topics --create --topic arbitrage-opportunities \
          --bootstrap-server kafka:29092 \
          --partitions 6 \
          --replication-factor 1 \
          --config retention.ms=604800000 \
          --config compression.type=gzip \
          --if-not-exists
        
        # Trade executions topic - low throughput, long retention
        kafka-topics --create --topic trade-executions \
          --bootstrap-server kafka:29092 \
          --partitions 3 \
          --replication-factor 1 \
          --config retention.ms=2592000000 \
          --config compression.type=gzip \
          --if-not-exists
        
        # Risk management alerts topic
        kafka-topics --create --topic risk-alerts \
          --bootstrap-server kafka:29092 \
          --partitions 2 \
          --replication-factor 1 \
          --config retention.ms=259200000 \
          --if-not-exists
        
        # Portfolio updates topic
        kafka-topics --create --topic portfolio-updates \
          --bootstrap-server kafka:29092 \
          --partitions 2 \
          --replication-factor 1 \
          --config retention.ms=604800000 \
          --if-not-exists
        
        echo 'Kafka topics created successfully!'
        kafka-topics --list --bootstrap-server kafka:29092
      "
    restart: "no"

  # =============================================================================
  # APPLICATION SERVICES
  # =============================================================================

  market-data-service:
    build: 
      context: ./services/market-data-service
      dockerfile: Dockerfile
    container_name: arbitrage-market-data
    ports:
      - "8001:8001"
    depends_on:
      kafka:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka-init:
        condition: service_completed_successfully
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - REDIS_URL=redis://redis:6379
      - PYTHONUNBUFFERED=1
    volumes:
      - ./services/market-data-service:/app
    restart: unless-stopped

  arbitrage-detection-service:
    build:
      context: ./services/arbitrage-detection-service
      dockerfile: Dockerfile
    container_name: arbitrage-detection
    ports:
      - "8002:8002"
    depends_on:
      kafka:
        condition: service_healthy
      redis:
        condition: service_healthy
      market-data-service:
        condition: service_started
      kafka-init:
        condition: service_completed_successfully
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - REDIS_URL=redis://redis:6379
      - PYTHONUNBUFFERED=1
    volumes:
      - ./services/arbitrage-detection-service:/app
    restart: unless-stopped

  exchange-integration-service:
    build:
      context: ./services/exchange-integration-service
      dockerfile: Dockerfile
    container_name: arbitrage-exchange-integration
    ports:
      - "8003:8003"
    depends_on:
      kafka:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka-init:
        condition: service_completed_successfully
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - REDIS_URL=redis://redis:6379
      - PYTHONUNBUFFERED=1
    volumes:
      - ./services/exchange-integration-service:/app
    restart: unless-stopped

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: arbitrage-frontend
    ports:
      - "5173:5173"
    depends_on:
      - market-data-service
      - arbitrage-detection-service
      - exchange-integration-service
    volumes:
      - ./frontend:/app
      - /app/node_modules
    environment:
      - NODE_ENV=development
      - VITE_API_BASE_URL=http://localhost
      - VITE_MARKET_DATA_URL=http://localhost:8001
      - VITE_ARBITRAGE_URL=http://localhost:8002
      - VITE_EXCHANGE_URL=http://localhost:8003
    restart: unless-stopped

# =============================================================================
# VOLUMES
# =============================================================================

volumes:
  zookeeper-data:
    driver: local
  kafka-data:
    driver: local
  timescaledb-data:
    driver: local
  redis-data:
    driver: local

# =============================================================================
# NETWORKS
# =============================================================================

networks:
  default:
    name: arbitrage-network
    driver: bridge
